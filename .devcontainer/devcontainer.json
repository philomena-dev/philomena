{
  // See the docs at https://containers.dev/implementors/json_reference/

  // We are using docker-compose to reuse the devcontainer definition in our
  // scripts in case if they are invoked from host. They can spin up their own
  // devcontainer to get access to the external dependencies they require unless
  // they are already running inside a devcontainer.
  "dockerComposeFile": "./docker-compose.yml",
  "service": "devcontainer",

  // Make sure our custom `init-container.sh` script is run at startup
  "overrideCommand": false,

  "workspaceFolder": "/home/philomena/philomena",

  // The devcontainer is on the same network as our main app docker compose
  // services, which means that that other containers are available by their
  // service names.
  "forwardPorts": [8080, 5173],
  "portsAttributes": {
    "5173": {
      "label": "Frotnend HMR"
    },
    "8080": {
      "label": "Frontend Main"
    }
  },
  "otherPortsAttributes": {
    // Don't rely on auto-inference for forwarded ports, make it reliable.
    "onAutoForward": "ignore"
  },

  "customizations": {
    "vscode": {
      "settings": {
        // Listen on `0.0.0.0` on the host machine to allow accessing the site
        // via the local network, e.g. with a phone connected to the same WiFi
        "remote.localPortHost": "allInterfaces",

        // Rust Analyzer struggles to discover the cargo workspace unless there
        // is a `Cargo.toml` in the repo root. So, we give it a small hint.
        "rust-analyzer.linkedProjects": ["./native/philomena/Cargo.toml"],

        // This notification is too noisy. It pops up on every devcontainer
        // rebuild
        "lexical.notifyOnServerAutoUpdate": false,

        "dbcode.connections": [
          {
            "connectionId": "philomena_dev",
            "name": "philomena_dev",
            "driver": "postgres",
            "connectionType": "host",
            "host": "localhost",
            "port": 5400,
            "ssl": false,
            "username": "postgres",
            "password": "postgres",
            "database": "philomena_dev"
          }
        ],

        "github.copilot.enable": {
          // https://dbcode.io/docs/query/inline-completion#provide-schema-to-copilot-for-sql-files
          "sql": false
        },

        "dbcode.resultLocation": "panel",
        "dbcode.orderByPrimaryKey": "Descending",

        "[dockercompose]": {
          // Prettier is the source of truth for YAML formatting
          "editor.defaultFormatter": "esbenp.prettier-vscode"
        }
      },
      "extensions": [
        // Elixir LSP
        "lexical-lsp.lexical",

        // DB explorer
        "dbcode.dbcode",

        // Rust LSP
        "rust-lang.rust-analyzer",

        // TOML LSP
        "tamasfe.even-better-toml",

        // Container management extension by Microsoft
        "ms-azuretools.vscode-docker",

        // Dockerfile LSP by Docker Inc.
        "docker.docker",

        // Github Actions LSP
        "github.vscode-github-actions",

        // Bash LSP
        "mads-hartmann.bash-ide-vscode",

        // Caddyfile LSP
        "matthewpi.caddyfile-support",

        // `.slime` syntax highlighting
        "xolan.slime",

        // `.js`, `.ts` linter
        "dbaeumer.vscode-eslint",

        // `.css` linter
        "stylelint.vscode-stylelint",

        // `.js`, `.ts`. `.css`, `.json`, `.yaml`, `.md` formatter
        "esbenp.prettier-vscode",

        // Spell checker enforced on CI
        "tekumara.typos-vscode",

        // `.toMatchInlineSnapshot()` syntax highlighting
        "tlent.jest-snapshot-language-support",

        // Inline git blame annotations
        "eamodio.gitlens"
      ]
    }
  }
}
